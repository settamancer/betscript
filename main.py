from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import os
import time
import pandas as pd
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from datetime import datetime
from config import PASSWORD, USERNAME

BRAVE_PATH = r"C:\Program Files\BraveSoftware\Brave-Browser\Application\brave.exe"
EXCEL_FILE = "pari_bets_history.xlsx"
LOGIN_URL = "https://pari.ru/authProcess/login"
BETS_URL = "https://pari.ru/account/history/bets"

TIMEOUT = 10

class PariParser:
    def __init__(self):
        self.driver = self.setup_driver()
        self.wait = WebDriverWait(self.driver, TIMEOUT)

    def setup_driver(self):
        if not os.path.exists(BRAVE_PATH):
            raise FileNotFoundError(f"Brave browser –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {BRAVE_PATH}")
        options = Options()
        options.binary_location = BRAVE_PATH
        options.add_argument("--start-maximized")
        service = Service(ChromeDriverManager(driver_version="136.0.7103.94").install())
        driver = webdriver.Chrome(service=service, options=options)
        return driver

    def load_existing_data(self):
        if os.path.exists(EXCEL_FILE):
            try:
                return pd.read_excel(EXCEL_FILE)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return pd.DataFrame()

    def login(self):
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ...")
        self.driver.get(LOGIN_URL)
        try:
            login_field = self.wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[data-testid="input"][name="login"]')))
            login_field.clear()
            login_field.send_keys(USERNAME)
            time.sleep(1)

            password_field = self.driver.find_element(By.CSS_SELECTOR, 'input[data-testid="input"][type="password"]')
            password_field.clear()
            password_field.send_keys(PASSWORD)
            time.sleep(1)

            login_span = self.wait.until(EC.element_to_be_clickable(
                (By.XPATH, '//span[text()="–í–æ–π—Ç–∏" and contains(@class, "button--_ckCX")]')))
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", login_span)
            time.sleep(0.5)
            self.driver.execute_script("arguments[0].click();", login_span)

            self.wait.until(EC.url_contains("/account/"))
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", str(e)[:300])
            print("–¢–µ–∫—É—â–∏–π URL:", self.driver.current_url)
            return False

    def parse_bets(self):
        print("üìä –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞–≤–∫–∞—Ö...")
        self.driver.get(BETS_URL)
        time.sleep(5)

        scroll_container = self.driver.find_element(By.CSS_SELECTOR, 'div.scroll-area__view-port__default--J1yYl')
        last_height = 0

        for i in range(100):
            self.driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", scroll_container)
            time.sleep(1.5)
            new_height = self.driver.execute_script("return arguments[0].scrollTop", scroll_container)
            if new_height == last_height:
                print(f"üîΩ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {i + 1} —à–∞–≥–µ ‚Äî –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü")
                break
            last_height = new_height

        bets = []
        current_date = None
        rows = self.driver.find_elements(By.CSS_SELECTOR, 'div[class^="row"]')

        for i, row in enumerate(rows):
            try:
                try:
                    date_cell = row.find_element(By.CSS_SELECTOR, '[class*="cellDate"]')
                    date_text = date_cell.text.strip()
                    if date_text:
                        current_date = date_text
                except:
                    pass

                try:
                    time_cell = row.find_element(By.CSS_SELECTOR, '[class*="cellDateTime"]')
                    time_text = time_cell.text.strip().lower()
                    if "–≤—Ä–µ–º—è" in time_text or not time_text:
                        print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ #{i+1} ‚Äî —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞")
                        continue
                    time_str = time_text
                except Exception as e:
                    print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫–µ #{i+1}: {e}")
                    continue

                if not current_date or not time_str:
                    print(f"‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ #{i+1} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è")
                    continue

                full_datetime = f"{current_date} {time_str}"

                def safe_get(selector, inside=row, default=""):
                    try:
                        return inside.find_element(By.CSS_SELECTOR, selector).text.strip()
                    except:
                        return default

                def safe_get_float(selector, inside=row, default=0.0):
                    try:
                        return float(inside.find_element(By.CSS_SELECTOR, selector).text.strip()
                                     .replace(',', '.').replace('‚ÇΩ', '').replace('\xa0', ''))
                    except:
                        return default

                bet_data = {
                    "–≤—Ä–µ–º—è": full_datetime,
                    "—Ç–∏–ø_–ø–∞—Ä–∏": safe_get('div[class*="cellPariType"] .text--Y2SFL'),
                    "—Å–æ–±—ã—Ç–∏–µ": safe_get('div[class*="cellDescription"] .text--Y2SFL'),
                    "–æ–ø–∏—Å–∞–Ω–∏–µ": safe_get('div[class*="cellDescription"] .text--Y2SFL'),
                    "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": safe_get_float('div[class*="cellFactor"] span'),
                    "—Å—É–º–º–∞": safe_get_float('div[class*="cellSum"] span'),
                    "—Ä–µ–∑—É–ª—å—Ç–∞—Ç": safe_get('div[class*="cellResult"]'),
                    "–ø—Ä–∏–±—ã–ª—å": self.calculate_profit(row)
                }
                bets.append(bet_data)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞ #{i + 1}")
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å—Ç–∞–≤–∫–∏ #{i+1}: {str(e)}")
                print("HTML —Å—Ç—Ä–æ–∫–∏:\n", row.get_attribute("innerHTML"))
        return bets

    def calculate_profit(self, item):
        try:
            result = item.find_element(By.CSS_SELECTOR, 'div[class*="cellResult"]').text.lower()
            if "–≤—ã–∏–≥—Ä—ã—à" in result:
                coefficient = float(item.find_element(By.CSS_SELECTOR, 'div[class*="cellFactor"] span').text.replace(',', '.'))
                amount = float(item.find_element(By.CSS_SELECTOR, 'div[class*="cellSum"] span').text.replace('‚ÇΩ','').replace('\xa0', '').replace(',', '.'))
                return round(coefficient * amount - amount, 2)
        except:
            pass
        return 0.0

    def save_data(self, existing_data, new_bets):
        if not new_bets:
            print("üîÑ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        new_df = pd.DataFrame(new_bets)
        new_df = new_df[new_df['–≤—Ä–µ–º—è'].notna()]
        new_df = new_df[~new_df['–≤—Ä–µ–º—è'].str.contains("None|–î–ê–¢–ê", na=False)]

        current_year = datetime.now().year

        def add_year_if_missing(dt_str):
            if dt_str.count('.') == 1:
                return f"{dt_str.split()[0]}.{current_year} {dt_str.split()[1]}"
            return dt_str

        new_df['–≤—Ä–µ–º—è'] = new_df['–≤—Ä–µ–º—è'].apply(add_year_if_missing)

        try:
            new_df['–≤—Ä–µ–º—è'] = pd.to_datetime(new_df['–≤—Ä–µ–º—è'], dayfirst=True)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:", e)
            return

        if not existing_data.empty:
            existing_data['–≤—Ä–µ–º—è'] = pd.to_datetime(existing_data['–≤—Ä–µ–º—è'], dayfirst=True, errors='coerce')
            combined_df = pd.concat([existing_data, new_df], ignore_index=True)

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≤—Å–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–ª—è–º
            combined_df.drop_duplicates(subset=['–≤—Ä–µ–º—è', '—Ç–∏–ø_–ø–∞—Ä–∏', '—Å–æ–±—ã—Ç–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç', '—Å—É–º–º–∞'], inplace=True)
        else:
            combined_df = new_df

        combined_df.sort_values('–≤—Ä–µ–º—è', ascending=False, inplace=True)
        combined_df['–≤—Ä–µ–º—è'] = combined_df['–≤—Ä–µ–º—è'].dt.strftime('%d.%m.%Y %H:%M')

        try:
            combined_df.to_excel(EXCEL_FILE, index=False)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(combined_df)} —Å—Ç–∞–≤–æ–∫ –≤ {EXCEL_FILE}")
        except Exception as e:
            print(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")


    def run(self):
        try:
            existing_data = self.load_existing_data()
            if not self.login():
                print("‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–∞–ø—á–∏! –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥...")
                time.sleep(30)
                if "bets" not in self.driver.current_url:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                    return
            new_bets = self.parse_bets()
            if new_bets:
                self.save_data(existing_data, new_bets)
            else:
                print("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞–≤–∫–∞—Ö")
        finally:
            self.driver.quit()

if __name__ == "__main__":
    parser = PariParser()
    parser.run()